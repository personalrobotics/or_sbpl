#ifndef SBPL_BASE_PLANNER_H_
#define SBPL_BASE_PLANNER_H_

#include <boost/shared_ptr.hpp>

#include <sbpl/config.h>
#include <sbpl/planners/planner.h>

#include <or_sbpl/SBPLBasePlannerEnvironment.h>

#include <openrave/openrave.h>
#include <openrave/planner.h>

namespace or_sbpl {

    typedef boost::shared_ptr<SBPLPlanner> SBPLPlannerPtr;

    /**
     * A wrapper that exposes the SBPL planner for the base as an OpenRAVE planner
     */
    class SBPLBasePlanner : public OpenRAVE::PlannerBase  {

    public:
	/**
	 * Constructor
	 *
	 * @param penv The OpenRAVE environment this planner will be run in
	 */
        SBPLBasePlanner(OpenRAVE::EnvironmentBasePtr penv);
	
	/**
	 * Destructor
	 */
        virtual ~SBPLBasePlanner();

	/**
	 * Initialize the planner
	 * 
	 * @param robot The OpenRAVE robot to plan for
	 * @param params The parameters of the planner
	 */
        virtual bool InitPlan(OpenRAVE::RobotBasePtr robot, PlannerParametersConstPtr params);

	/**
	 * Initialize the planner
	 * 
	 * @param robot The OpenRAVE robot to plan for
	 * @param input A stream to read planner parameters from
	 */
        virtual bool InitPlan(OpenRAVE::RobotBasePtr robot, std::istream& input);

	/**
	 * Run the planner
	 * 
	 * @param ptraj The trajectory that is generated by this planner
	 * @return The status of the planning
	 */
        virtual OpenRAVE::PlannerStatus PlanPath(OpenRAVE::TrajectoryBasePtr ptraj);
	
	/**
	 * @return The parameters for the planner
	 */
        virtual PlannerParametersConstPtr GetParameters() const { return _params; }
        
        /**
         * @return The planning environment
         */
        SBPLBasePlannerEnvironmentConstPtr GetPlannerEnv() const { return _env; }

    private:

	void AddWaypoint(OpenRAVE::TrajectoryBasePtr ptraj, const OpenRAVE::ConfigurationSpecification &config_spec,
			 const double &x, const double &y, const double &theta) const;


        OpenRAVE::EnvironmentBasePtr _orenv;
        OpenRAVE::RobotBasePtr _robot;
        PlannerParametersConstPtr _params;
        SBPLPlannerPtr _planner;
        SBPLBasePlannerEnvironmentPtr _env;
	double _maxtime;
	double _epsinit;
	double _epsdec;
	bool _return_first;
	
        bool _initialized;
    };
    
    typedef boost::shared_ptr<SBPLBasePlanner> SBPLBasePlannerPtr;

}
    
#endif
